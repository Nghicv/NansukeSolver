package nghicv.com.util;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.sat4j.minisat.SolverFactory;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;

public class NansukeSolver {
	private ArrayList<String> listLabelNansuke;
	private Nansuke mNansuke;
	private JFrame mFrame;
	private JComboBox mComboBox;
	private JPanel panelMenu;
	private JButton btnSolver;
	private JLabel labelMatrix[][];
	private JPanel panelMatrix;
	private JPanel panelNumber;
	private JLabel labelTime;
	
	private void init(){
		listLabelNansuke=new ArrayList<String>();
		for(int i=0;i<NansukeUtil.arrNansukeQuestions.length;i++){
			listLabelNansuke.add(NansukeUtil.arrNansukeQuestions[0].toString());
		}
		
		mNansuke=NansukeUtil.arrNansukeQuestions[0];
		mFrame=new JFrame();
		mFrame.setSize(1000,800 );
		mFrame.setLayout(null);
		
		panelMenu=new JPanel();
		panelMenu.setLayout(null);
		panelMenu.setSize(300,800);
		panelMenu.setBackground(Color.gray);
		panelMenu.setLocation(700, 0);
		
		JLabel lableSize=new JLabel("Size :");
		lableSize.setSize(70, 50);
		lableSize.setLocation(50, 50);
		panelMenu.add(lableSize);
		
		mComboBox=new JComboBox(listLabelNansuke);
		mComboBox.setLocation(170, 50);
		mComboBox.setSize(100, 40);
		mComboBox.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				JComboBox cb=(JComboBox)e.getSource();
				String itemSelect=(String) cb.getSelectedItem();
				System.out.println(itemSelect);
				
			}
		});
		mFrame.add(panelMenu);
		
	}
	
	public void Solver()
	{
        ISolver solver = SolverFactory.newDefault();
        solver.setTimeout(3600); 
        Reader reader = new DimacsReader(solver);
        try {
            IProblem problem = reader.parseInstance("data.txt");
            if (problem.isSatisfiable()) {
                System.out.println("Satisfiable !");
                System.out.println(reader.decode(problem.model()));
            } else {
                System.out.println("Unsatisfiable !");
            }
        } catch (Exception e) {
            System.out.println("Unsatisfiable");
            e.printStackTrace();
        }
    }
}
